#ifndef TS
#define TS(x,str,val)
#endif

TS(NEWLINE,        "newline", = 256)
TS(INDENT,         "indent",)
TS(DEDENT,         "dedent",)
TS(IDENTIFIER,     "identifier",)
TS(INTEGER,        "integer number",)
TS(STRING_LITERAL, "string literal",)

#define S(x)   T(x,#x,)
S(void)
S(extern)
S(bool)
S(true)
S(false)
S(byte)
S(var)
S(func)
S(short)
S(int)
S(long)
S(float)
S(double)
S(unsigned)
S(signed)
S(return)
S(if)
S(else)
S(cast)
S(const)
S(static)
S(import)
S(struct)
S(typeclass)
S(instance)
S(goto)
S(__sizeof)
S(__constructor)
#undef S

T(DOTDOT, "..",)
T(DOTDOTDOT, "...",)
T(ASSIGN, "<-",)
T(SLASHEQUAL, "/=",)
T(LESSEQUAL, "<=",)
T(LESSLESS, "<<",)
T(GREATEREQUAL, ">=",)
T(GREATERGREATER, ">>",)
T(MULTILINE_COMMENT_BEGIN, "/*",)
T(MULTILINE_COMMENT_END, "*/",)
T(SINGLELINE_COMMENT, "//",)

#define T_LAST_TOKEN  (T_SINGLELINE_COMMENT+1)

T(PLUS, "+", = '+')
T(MINUS, "-", = '-')
T(MULT, "*", = '*')
T(DIV, "/", = '/')
T(MOD, "%", = '%')
T(EQUAL, "=", = '=')
T(LESS, "<", = '<')
T(GREATER, ">", = '>')
T(DOT, ".", = '.')
T(CARET, "^", = '^')
T(EXCLAMATION, "!", = '!')
T(QUESTION, "?", = '?')
T(AND, "&", = '&')
T(TILDE, "~", = '~')
T(LINE, "|", = '|')


#ifndef TS
#define TS(x,str,val)
#endif

TS(NEWLINE,        "newline", = 256)
TS(INDENT,         "indent",)
TS(DEDENT,         "dedent",)
TS(IDENTIFIER,     "identifier",)
TS(INTEGER,        "integer number",)
TS(STRING_LITERAL, "string literal",)

#define Keyword(x)   T(x,#x,)
Keyword(bool)
Keyword(byte)
Keyword(cast)
Keyword(class)
Keyword(const)
Keyword(double)
Keyword(else)
Keyword(export)
Keyword(extern)
Keyword(false)
Keyword(float)
Keyword(func)
Keyword(goto)
Keyword(if)
Keyword(instance)
Keyword(int)
Keyword(long)
Keyword(namespace)
Keyword(null)
Keyword(return)
Keyword(short)
Keyword(signed)
Keyword(static)
Keyword(struct)
Keyword(true)
Keyword(typealias)
Keyword(concept)
Keyword(union)
Keyword(unsigned)
Keyword(var)
Keyword(void)
Keyword(sizeof)
#undef S

T(DOTDOT, "..",)
T(DOTDOTDOT, "...",)
T(ASSIGN, "<-",)
T(TYPESTART, "<$",)
T(SLASHEQUAL, "/=",)
T(LESSEQUAL, "<=",)
T(LESSLESS, "<<",)
T(GREATEREQUAL, ">=",)
T(GREATERGREATER, ">>",)
T(PIPEPIPE, "||",)
T(ANDAND, "&&",)
T(PLUSPLUS, "++",)
T(MINUSMINUS, "--",)
T(MULTILINE_COMMENT_BEGIN, "/*",)
T(MULTILINE_COMMENT_END, "*/",)
T(SINGLELINE_COMMENT, "//",)

#define T_LAST_TOKEN  (T_SINGLELINE_COMMENT+1)

T(PLUS, "+", = '+')
T(MINUS, "-", = '-')
T(MULT, "*", = '*')
T(DIV, "/", = '/')
T(MOD, "%", = '%')
T(EQUAL, "=", = '=')
T(LESS, "<", = '<')
T(GREATER, ">", = '>')
T(DOT, ".", = '.')
T(CARET, "^", = '^')
T(EXCLAMATION, "!", = '!')
T(QUESTION, "?", = '?')
T(AND, "&", = '&')
T(TILDE, "~", = '~')
T(PIPE, "|", = '|')
T(DOLLAR, "$", = '$')

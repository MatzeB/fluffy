struct PixelFormat:

struct Palette:
	ncolors : int
	colors  : Color

struct Color:
	r : byte
	g : byte
	b : byte
	a : byte

struct Surface:
	flags          : unsigned int
	format         : PixelFormat*
	w              : int
	h              : int
	pitch          : unsigned short
	pixels         : void*
	offset         : int
	hwdata         : void*

	clip_rect      : Rect

	unused1        : unsigned int
	locked         : unsigned int
	map            : void*
	format_version : unsigned int
	refcount       : int

struct Rect:
	x : short
	y : short
	w : unsigned short
	h : unsigned short

func extern SDL_Init(flags : unsigned int) : int
func extern SDL_Quit() : void
func extern SDL_GetError() : byte*

func extern SDL_SetVideoMode(width : int, height : int, bpp : int, flags : int) : Surface*
func extern SDL_UpperBlit(src : Surface*, srcrect : Rect*, dest : Surface*, destrect : Rect*) : int
func extern SDL_FillRect(dest : Surface*, destrect : Rect*, color : unsigned int) : int
func extern IMG_Load(filename : byte*) : Surface*
func extern SDL_FreeSurface(surface : Surface*)
func extern SDL_Delay(ms : unsigned int)
func extern SDL_Flip(screen : Surface*)

func extern malloc(size : unsigned int) : void*
func extern free(ptr : void*)

func extern printf(format : byte*, ...) : int

func main(argc : int, argv : byte * * ) : int:
	SDL_Init(cast<unsigned int> 0x0000FFFF)

	var image_count = argc - 1
	var screen      = SDL_SetVideoMode(640, 480, 0, 0)
	var filename    = argv + cast<byte * * > 4
	var i           = 0
	var rect        = cast<Rect* > (malloc(cast<unsigned int> 8))

	printf("Screen: %dx%d\n", screen.w, screen.h)

	:loop
	if i >= image_count:
		goto end

	printf("Loading file: %s\n", *filename)
	var image = IMG_Load(*filename)
	if image == null:
		return 1
	
	SDL_FillRect(screen, null, cast<unsigned int> 0)
	rect.x = (screen.w - image.w) >> 1
	rect.y = (screen.h - image.h) >> 1
	SDL_UpperBlit(image, null, screen, rect)
	SDL_Flip(screen)

	SDL_Delay(cast<unsigned int> 1500)
	i        = i + 1
	filename = filename + cast<byte * * > 4
	goto loop

	:end

	free(rect)
	SDL_Quit()

	return 0

export main

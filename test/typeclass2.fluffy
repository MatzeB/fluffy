func extern malloc(size : unsigned int) : void*
func extern printf(format : byte*, ...) : int
func extern puts(val : byte*)

typeclass Ordered<T>:
	/* TODO use bool as return type... */
	func less(obj1 : T, obj2 : T) : int

instance Ordered int:
	func less(obj1 : int, obj2 : int) : int:
		if obj1 < obj2:
			return 1
		return 0

typeclass Printable<T>:
	func print(obj : T)

instance Printable byte*:
	func print(obj : byte*):
		puts(obj)

instance Printable int:
	func print(obj : int):
		printf("%d\n", obj)

func bubblesort<T : Ordered> (array : T*, len : int):
	var sorted <- 1

	var i <- 0
	:loop
	if i >= len - 1:
		if sorted /= 1:
			bubblesort(array, len)
		return
	
	if array[i] > array[i+1]:
		var temp   <- array[i]
		array[i]   <- array[i+1]
		array[i+1] <- temp
		sorted     <- 0
	
	i <- i + 1
	goto loop

func print_array<T : Printable>(array : T*, len : int):
	var i <- 0
	:loop
	if i >= len:
		return

	print(array[i])
	
	i <- i + 1
	goto loop

func main() : int:
	typealias arr_type <- int*
	var array <- cast<arr_type> malloc( cast<unsigned int> 10 * sizeof<int>)
	array[0] <- 20
	array[1] <- 10
	array[2] <- 5
	array[3] <- 89
	array[4] <- 24
	array[5] <- 43
	array[6] <- 13
	array[7] <- 99
	array[8] <- 66
	array[9] <- 5

	print("Initial array:")
	print_array(array, 10)
	
	bubblesort(array, 10)

	print("Sorted array:")
	print_array(array, 10)
	
	return 0


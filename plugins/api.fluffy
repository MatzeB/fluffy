module "fluffy.org/compiler/pluginapi"
export SourcePosition, Symbol, Token, Type, Attribute, CompoundEntry, \
       CompoundType, TypeConstraint, Entity, Export, Context, \
       TypeVariable, Constant, Statement, Expression, IntConst, \
       BinaryExpression, BlockStatement, ExpressionStatement, \
       LabelStatement, GotoStatement, IfStatement, Concept, \
       ConceptFunction, ConceptInstance, Lexer, \
       STATEMENT_INAVLID, STATEMENT_ERROR, STATEMENT_BLOCK, \
       STATEMENT_RETURN, STATEMENT_DECLARATION, STATEMENT_IF, \
       STATEMENT_EXPRESSION, STATEMENT_GOTO, STATEMENT_LABEL, \
       EXPR_BINARY_ADD, EXPR_BINARY_ASSIGN, \
       register_new_token, register_statement, register_expression, \
       register_declaration, register_attribute, register_statement_parser, \
       register_attribute_parser, register_expression_parser, \
       register_expression_infix_parser, register_declaration_parser, \
       print_token, lexer_next_token, add_entity, parse_sub_expression, \
       parse_expression, parse_statement, check_expression, \
       register_statement_lowerer, register_expression_lowerer, \
       make_atomic_type, make_pointer_type, symbol_table_insert, \
       parse_type, print_error_prefix, print_warning_prefix, \
       check_statement, source_position, api_init, expect, \
       context_append, block_append, allocate, allocate_zero, AllocateOnAst, \
       token, next_token, \
       T_IDENTIFIER, T_INDENT, T_NEWLINE, T_EOF, ATOMIC_TYPE_INT, \
       T_DEDENT

import "fluffy.org/stdlib" stderr, fputs, abort, assert, memset

struct SourcePosition:
	input_name : byte*
	linenr     : unsigned int

struct Symbol:
	string : byte*
	id     : unsigned int
	thing  : EnvironmentEntry*
	label  : EnvironmentEntry*

struct Token:
	type : int
	v    : V

union V:
	symbol   : Symbol*
	intvalue : int
	string   : String

struct Type:
	type      : unsigned int
	firm_type : IrType*

struct Attribute:
	type            : unsigned int
	source_position : SourcePosition
	next            : Attribute*

struct CompoundEntry:
	type            : Type*
	symbol          : Symbol*
	next            : CompoundEntry*
	attributes      : Attribute*
	source_position : SourcePosition
	entity          : IrEntity*

struct CompoundType:
	type            : Type
	entries         : CompoundEntry*
	symbol          : Symbol*
	attributes      : Attribute
	type_parameters : TypeVariable*
	context         : Context*
	source_position : SourcePosition

struct FunctionParameterType:
	type            : Type*
	next            : FunctionParameterType*

struct TypeConstraint:
	concept_symbol : Symbol*
	conceptt       : Concept*
	next           : TypeConstraint*

struct FunctionType:
	base               : Type
	result_type        : Type*
	parameter_types    : FunctionParameterType*
	variable_arguments : bool

struct TypeArgument:
	type             : Type*
	next             : TypeArgument*

struct Entity:
	kind             : unsigned int
	symbol           : Symbol*
	source_position  : SourcePosition
	next             : Entity*
	exported         : bool
	refs             : int

struct Export:
	symbol           : Symbol*
	next             : Export*
	source_position  : SourcePosition

struct Import:
	modulename       : Symbol*
	symbol           : Symbol*
	next             : Import*
	source_position  : SourcePosition

struct Context:
	entities          : Entity*
	concept_instances : ConceptInstance*
	exports           : Export*
	imports           : Import*

struct TypeVariable:
	base            : Entity
	constraints     : TypeConstraint*
	next            : TypeVariable*
	current_type    : Type*

struct FunctionParameter:
	base            : Entity
	next            : FunctionParameter*
	type            : Type*
	num             : int

struct Constant:
	base            : Entity
	type            : Type*
	expression      : Expression*

struct Function:
	type            : FunctionType*
	type_parameters : TypeVariable*
	parameters      : FunctionParameter*
	is_extern       : bool
	context         : Context
	statement       : Statement*
	/* Missing here: union { ir_entity*entity, ir_entity ** entities; } */
	dummy           : void*
	n_local_vars    : unsigned int

struct FunctionEntity:
	base            : Entity
	function        : Function

struct Statement:
	type            : unsigned int
	next            : Statement*
	source_position : SourcePosition

struct Expression:
	kind            : unsigned int
	type            : Type*
	source_position : SourcePosition
	lowered         : byte

struct IntConst:
	expression      : Expression
	value           : int

struct BinaryExpression:
	expression      : Expression
	type            : int
	left            : Expression*
	right           : Expression*

struct BlockStatement:
	base            : Statement
	statements      : Statement*
	end_position    : SourcePosition
	context         : Context

struct ExpressionStatement:
	base            : Statement
	expression      : Expression*

struct Label:
	base            : Entity
	block           : IrNode*
	next            : Label*

struct LabelStatement:
	base            : Statement
	label           : Label

struct GotoStatement:
	base            : Statement
	label_symbol    : Symbol*
	label           : Label*

struct IfStatement:
	base            : Statement
	condition       : Expression*
	true_statement  : Statement*
	false_statement : Statement*

struct Concept:
	base            : Entity
	type_parameters : TypeVariable*
	functions       : ConceptFunction*
	instances       : ConceptInstance
	context         : Context

struct ConceptFunction:
	base            : Entity
	type            : FunctionType*
	parameters      : FunctionParameter*
	conceptt        : Concept*
	next            : ConceptFunction*

struct ConceptFunctionInstance:
	function          : Function
	symbol            : Symbol*
	source_position   : SourcePosition
	next              : ConceptFunctionInstance*
	concept_function  : ConceptFunction*
	concept_instances : ConceptInstance*	

struct ConceptInstance:
	concept_symbol     : Symbol*
	source_position    : SourcePosition
	conceptt           : Concept*
	type_arguments     : TypeArgument*
	function_instances : ConceptFunctionInstance*
	next               : ConceptInstance*
	next_in_concept    : ConceptInstance*
	context            : Context
	type_parameters    : TypeVariable*

struct Lexer:
	c               : int
	source_position : SourcePosition
	input           : FILE*
	// more stuff...

const STATEMENT_INAVLID            = 0
const STATEMENT_ERROR              = 1
const STATEMENT_BLOCK              = 2
const STATEMENT_RETURN             = 3
const STATEMENT_DECLARATION        = 4
const STATEMENT_IF                 = 5
const STATEMENT_EXPRESSION         = 6
const STATEMENT_GOTO               = 7
const STATEMENT_LABEL              = 8

const TYPE_INVALID                 = 0
const TYPE_ERROR                   = 1
const TYPE_VOID                    = 2
const TYPE_ATOMIC                  = 3
const TYPE_COMPOUND_STRUCT         = 4
const TYPE_COMPOUND_UNION          = 5
const TYPE_FUNCTION                = 6
const TYPE_POINTER                 = 7
const TYPE_ARRAY                   = 8
const TYPE_TYPEOF                  = 9
const TYPE_REFERENCE               = 10
const TYPE_REFERENCE_TYPE_VARIABLE = 11
const TYPE_BIND_TYPEVARIABLES      = 12

const ENTITY_INVALID            = 0
const ENTITY_ERROR              = 1
const ENTITY_FUNCTION           = 2
const ENTITY_FUNCTION_PARAMETER = 3
const ENTITY_TYPE_VARIABLE      = 4
const ENTITY_CONCEPT_FUNCTION   = 5
const ENTITY_CONCEPT            = 6
const ENTITY_VARIABLE           = 7
const ENTITY_CONSTANT           = 8
const ENTITY_TYPEALIAS          = 9
const ENTITY_LABEL              = 10

const ATOMIC_TYPE_INVALID       = 0
const ATOMIC_TYPE_BOOL          = 1
const ATOMIC_TYPE_BYTE          = 2
const ATOMIC_TYPE_UBYTE         = 3
const ATOMIC_TYPE_SHORT         = 4
const ATOMIC_TYPE_USHORT        = 5
const ATOMIC_TYPE_INT           = 6
const ATOMIC_TYPE_UINT          = 7
const ATOMIC_TYPE_LONG          = 8
const ATOMIC_TYPE_ULONG         = 9
const ATOMIC_TYPE_LONGLONG      = 10
const ATOMIC_TYPE_ULONGLONG     = 11
const ATOMIC_TYPE_FLOAT         = 12
const ATOMIC_TYPE_DOUBLE        = 13

const EXPR_INVALID                 = 0
const EXPR_ERROR                   = 1
const EXPR_INT_CONST               = 2
const EXPR_FLOAT_CONST             = 3
const EXPR_BOOL_CONST              = 4
const EXPR_STRING_CONST            = 5
const EXPR_NULL_POINTER            = 6
const EXPR_REFERENCE               = 7
const EXPR_CALL                    = 8
const EXPR_SELECT                  = 9
const EXPR_ARRAY_ACCESS            = 10
const EXPR_SIZEOF                  = 11
const EXPR_FUNC                    = 12
const EXPR_UNARY_NEGATE            = 13
const EXPR_UNARY_NOT               = 14
const EXPR_UNARY_BITWISE_NOT       = 15
const EXPR_UNARY_DEREFERENCE       = 16
const EXPR_UNARY_TAKE_ADDRESS      = 17
const EXPR_UNARY_CAST              = 18
const EXPR_UNARY_INCREMENT         = 19
const EXPR_UNARY_DECREMENT         = 20
const EXPR_BINARY_ASSIGN           = 21
const EXPR_BINARY_ADD              = 22
const EXPR_BINARY_SUB              = 23
const EXPR_BINARY_MUL              = 24
const EXPR_BINARY_DIV              = 25
const EXPR_BINARY_MOD              = 26
const EXPR_BINARY_EQUAL            = 27
const EXPR_BINARY_NOTEQUAL         = 28
const EXPR_BINARY_LESS             = 29
const EXPR_BINARY_LESSEQUAL        = 30
const EXPR_BINARY_GREATER          = 31
const EXPR_BINARY_GREATEREQUAL     = 32
const EXPR_BINARY_LAZY_AND         = 33
const EXPR_BINARY_LAZY_OR          = 34
const EXPR_BINARY_AND              = 35
const EXPR_BINARY_OR               = 36
const EXPR_BINARY_XOR              = 37
const EXPR_BINARY_SHIFTLEFT        = 38
const EXPR_BINARY_SHIFTRIGHT       = 39

const T_EOF            = 4
const T_NEWLINE        = 256
const T_INDENT         = 257
const T_DEDENT         = 258
const T_IDENTIFIER     = 259
const T_INTEGER        = 260
const T_STRING_LITERAL = 261

typealias FILE                    = void
typealias EnvironmentEntry        = void
typealias IrNode                  = void
typealias IrType                  = void
typealias IrEntity                = void
typealias ParseStatementFunction  = func () : Statement*
typealias ParseAttributeFunction  = func () : Attribute*
typealias ParseExpressionFunction = func () : Expression*
typealias ParseExpressionInfixFunction = func (left : Expression*) : Expression*
typealias LowerStatementFunction  = func (statement : Statement*) : Statement*
typealias LowerExpressionFunction = func (expression : Expression*) : Expression*
typealias ParseDeclarationFunction = func() : void
typealias String                  = byte*

func extern register_new_token(token : String) : unsigned int
func extern register_statement() : unsigned int
func extern register_expression() : unsigned int
func extern register_declaration() : unsigned int
func extern register_attribute() : unsigned int

func extern register_statement_parser(parser : ParseStatementFunction*, \
                                      token_type : int)
func extern register_attribute_parser(parser : ParseAttributeFunction*, \
                                      token_type : int)
func extern register_expression_parser(parser : ParseExpressionFunction*, \
                                       token_type : int)
func extern register_expression_infix_parser( \
				parser : ParseExpressionInfixFunction, token_type : int, \
				precedence : unsigned int)
func extern register_declaration_parser(parser : ParseDeclarationFunction*, \
                                        token_type : int)
func extern print_token(out : FILE*, token : Token*)
func extern lexer_next_token(token : Token*)
func extern allocate_ast(size : unsigned int) : void*
func extern parser_print_error_prefix()
func extern next_token()
func extern add_entity(entity : Entity*)

func extern parse_sub_expression(precedence : unsigned int) : Expression*
func extern parse_expression() : Expression*
func extern parse_statement() : Statement*
func extern parse_type() : Type*

func extern print_error_prefix(position : SourcePosition)
func extern print_warning_prefix(position : SourcePosition)
func extern check_statement(statement : Statement*) : Statement*
func extern check_expression(expression : Expression*) : Expression*
func extern register_statement_lowerer(function : LowerStatementFunction*, \
                                       statement_type : unsigned int)
func extern register_expression_lowerer(function : LowerExpressionFunction*, \
                                        expression_type : unsigned int)

func extern make_atomic_type(type : int) : Type*
func extern make_pointer_type(type : Type*) : Type*

func extern symbol_table_insert(string : String) : Symbol*


var extern token           : Token
var extern source_position : SourcePosition

concept AllocateOnAst<T>:
	func allocate() : T*

func allocate_zero<T>() : T*:
	var res = cast<T* > allocate_ast(sizeof<T>)
	memset(res, 0, sizeof<T>)
	return res

instance AllocateOnAst BlockStatement:
	func allocate() : BlockStatement*:
		var res = allocate_zero<$BlockStatement>()
		res.base.type = STATEMENT_BLOCK
		return res
	
instance AllocateOnAst IfStatement:
	func allocate() : IfStatement*:
		var res = allocate_zero<$IfStatement>()
		res.base.type = STATEMENT_IF
		return res

instance AllocateOnAst ExpressionStatement:
	func allocate() : ExpressionStatement*:
		var res = allocate_zero<$ExpressionStatement>()
		res.base.type = STATEMENT_EXPRESSION
		return res

instance AllocateOnAst GotoStatement:
	func allocate() : GotoStatement*:
		var res = allocate_zero<$GotoStatement>()
		res.base.type = STATEMENT_GOTO
		return res

instance AllocateOnAst LabelStatement:
	func allocate() : LabelStatement*:
		var res = allocate_zero<$LabelStatement>()
		res.base.type       = STATEMENT_LABEL
		res.label.base.kind = ENTITY_LABEL
		return res

instance AllocateOnAst Constant:
	func allocate() : Constant*:
		var res = allocate_zero<$Constant>()
		res.base.kind = ENTITY_CONSTANT
		return res

instance AllocateOnAst BinaryExpression:
	func allocate() : BinaryExpression*:
		var res = allocate_zero<$BinaryExpression>()
		return res

instance AllocateOnAst IntConst:
	func allocate() : IntConst*:
		var res = allocate_zero<$IntConst>()
		res.expression.kind = EXPR_INT_CONST
		return res

func api_init():

func expect(token_type : int):
	if token.type /= token_type:
		parser_print_error_prefix()
		fputs("Parse error expected another token\n", stderr)
		abort()
	next_token()

func context_append(context : Context*, entity : Entity*):
	entity.next      = context.entities
	context.entities = entity

func block_append(block : BlockStatement*, append : Statement*):
	var statement = block.statements

	if block.statements == null:
		block.statements = append
		return

	:label
	if statement.next == null:
		statement.next = append
		return

	statement = statement.next
	goto label


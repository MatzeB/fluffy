struct SourcePosition:
	input_name : byte*
	linenr     : unsigned int

struct Symbol:
	string : byte*
	id     : unsigned int
	thing  : EnvironmentEntry*
	label  : EnvironmentEntry*

struct Token:
	type : int
	v    : V

union V:
	symbol   : Symbol*
	intvalue : int
	string   : String

struct Type:
	type      : unsigned int
	firm_type : IrType*

struct Attribute:
	type            : unsigned int
	source_position : SourcePosition
	next            : Attribute*

struct CompoundEntry:
	type            : Type*
	symbol          : Symbol*
	next            : CompoundEntry*
	attributes      : Attribute*
	source_position : SourcePosition
	entity          : IrEntity*

struct CompoundType:
	type            : Type
	entries         : CompoundEntry*
	symbol          : Symbol*
	attributes      : Attribute
	type_parameters : TypeVariable*
	context         : Context*
	source_position : SourcePosition

struct TypeConstraint:
	concept_symbol : Symbol*
	type_class     : TypeClass*
	next           : TypeConstraint*

struct Declaration:
	type             : unsigned int
	symbol           : Symbol*
	next             : Declaration*
	source_position  : SourcePosition

struct Export:
	symbol           : Symbol
	next             : Export*
	source_position  : SourcePosition

struct Context:
	declarations      : Declaration*
	concept_instances : TypeClassInstance*
	exports           : Export*

struct TypeVariable:
	declaration      : Declaration
	constraints      : TypeConstraint*
	next             : TypeVariable*
	current_type     : Type*

struct Constant:
	declaration     : Declaration
	type            : Type*
	expression      : Expression*

struct Statement:
	type            : unsigned int
	next            : Statement*
	source_position : SourcePosition

struct Expression:
	type            : unsigned int
	datatype        : Type*
	source_position : SourcePosition

struct IntConst:
	expression      : Expression
	value           : int

struct BinaryExpression:
	expression      : Expression
	type            : int
	left            : Expression*
	right           : Expression*

struct BlockStatement:
	statement       : Statement
	statements      : Statement*
	end_position    : SourcePosition
	context         : Context

struct ExpressionStatement:
	statement       : Statement
	expression      : Expression*

struct LabelDeclaration:
	declaration     : Declaration
	block           : IrNode*
	next            : LabelDeclaration*

struct LabelStatement:
	statement       : Statement
	declaration     : LabelDeclaration

struct GotoStatement:
	statement       : Statement
	symbol_t        : Symbol*
	label           : LabelDeclaration*

struct IfStatement:
	statement       : Statement
	condition       : Expression*
	true_statement  : Statement*
	false_statement : Statement*

struct TypeClass:
	declaration     : Declaration*
	
	type_parameters : TypeVariable*
	methods         : TypeClassMethod*
	instances       : TypeClassInstance*
	context         : Context

struct TypeClassMethod:
	// TODO

struct TypeClassInstance:
	// TODO

struct Lexer:
	c               : int
	source_position : SourcePosition
	input           : FILE*
	// more stuff...

const STATEMENT_INAVLID              <- 0
const STATEMENT_BLOCK                <- 1
const STATEMENT_RETURN               <- 2
const STATEMENT_VARIABLE_DECLARATION <- 3
const STATEMENT_IF                   <- 4
const STATEMENT_EXPRESSION           <- 5
const STATEMENT_GOTO                 <- 6
const STATEMENT_LABEL                <- 7

const TYPE_INVALID                 <- 0
const TYPE_VOID                    <- 1
const TYPE_ATOMIC                  <- 2
const TYPE_COMPOUND_STRUCT         <- 3
const TYPE_COMPOUND_UNION          <- 4
const TYPE_METHOD                  <- 5
const TYPE_POINTER                 <- 6
const TYPE_ARRAY                   <- 7
const TYPE_REFERENCE               <- 8
const TYPE_REFERENCE_TYPE_VARIABLE <- 9

const DECLARATION_INVALID          <- 0
const DECLARATION_METHOD           <- 1
const DECLARATION_METHOD_PARAMETER <- 2
const DECLARATION_VARIABLE         <- 3
const DECLARATION_CONSTANT         <- 4
const DECLARATION_TYPE_VARIABLE    <- 5
const DECLARATION_TYPEALIAS        <- 6
const DECLARATION_TYPECLASS        <- 7
const DECLARATION_TYPECLASS_METHOD <- 8
const DECLARATION_LABEL            <- 9

const ATOMIC_TYPE_INVALID          <- 0
const ATOMIC_TYPE_BOOL             <- 1
const ATOMIC_TYPE_BYTE             <- 2
const ATOMIC_TYPE_UBYTE            <- 3
const ATOMIC_TYPE_SHORT            <- 4
const ATOMIC_TYPE_USHORT           <- 5
const ATOMIC_TYPE_INT              <- 6
const ATOMIC_TYPE_UINT             <- 7
const ATOMIC_TYPE_LONG             <- 8
const ATOMIC_TYPE_ULONG            <- 9

const EXPR_INVALID                 <- 0
const EXPR_INT_CONST               <- 1
const EXPR_BOOL_CONST              <- 2
const EXPR_STRING_CONST            <- 3
const EXPR_NULL_POINTER            <- 4
const EXPR_REFERENCE               <- 5
const EXPR_CALL                    <- 6
const EXPR_UNARY                   <- 7
const EXPR_BINARY                  <- 8

const BINEXPR_INVALID              <- 0
const BINEXPR_ASSIGN               <- 1
const BINEXPR_ADD                  <- 2

const T_EOF            <- -1
const T_NEWLINE        <- 256
const T_INDENT         <- 257
const T_DEDENT         <- 258
const T_IDENTIFIER     <- 259
const T_INTEGER        <- 260
const T_STRING_LITERAL <- 261
const T_ASSIGN         <- 296

typealias FILE                    <- void
typealias EnvironmentEntry        <- void
typealias IrNode                  <- void
typealias IrType                  <- void
typealias IrEntity                <- void
typealias ParseStatementFunction  <- func () : Statement*
typealias ParseAttributeFunction  <- func () : Attribute*
typealias ParseExpressionFunction <- func (precedence : unsigned int) : Expression*
typealias ParseExpressionInfixFunction <- func (precedence : unsigned int, \
                                               left : Expression*) : Expression*
typealias LowerStatementFunction  <- func (statement : Statement*) : Statement*
typealias LowerExpressionFunction <- func (expression : Expression*) : Expression*
typealias ParseDeclarationFunction <- func() : void
typealias String                  <- byte*

func extern register_new_token(token : String) : unsigned int
func extern register_statement() : unsigned int
func extern register_expression() : unsigned int
func extern register_declaration() : unsigned int
func extern register_attribute() : unsigned int

func extern puts(string : String) : int
func extern fputs(string : String, stream : FILE*) : int
func extern printf(string : String, ptr : void*)
func extern abort()
func extern memset(ptr : void*, c : int, size : unsigned int)

func extern register_statement_parser(parser : ParseStatementFunction*, \
                                      token_type : int)
func extern register_attribute_parser(parser : ParseAttributeFunction*, \
                                      token_type : int)
func extern register_expression_parser(parser : ParseExpressionFunction*, \
                                       token_type : int, \
									   precedence : unsigned int)
func extern register_expression_infix_parser( \
				parser : ParseExpressionInfixFunction, token_type : int, \
				precedence : unsigned int)
func extern register_declaration_parser(parser : ParseDeclarationFunction*, \
                                        token_type : int)
func extern print_token(out : FILE*, token : Token*)
func extern lexer_next_token(token : Token*)
func extern allocate_ast(size : unsigned int) : void*
func extern parser_print_error_prefix()
func extern next_token()
func extern add_declaration(declaration : Declaration*)

func extern parse_sub_expression(precedence : unsigned int) : Expression*
func extern parse_expression() : Expression*
func extern parse_statement() : Statement*
func extern parse_type() : Type*

func extern print_error_prefix(position : SourcePosition)
func extern print_warning_preifx(position : SourcePosition)
func extern check_statement(statement : Statement*) : Statement*
func extern check_expression(expression : Expression*) : Expression*
func extern register_statement_lowerer(function : LowerStatementFunction*, \
                                       statement_type : unsigned int)
func extern register_expression_lowerer(function : LowerExpressionFunction*, \
                                        expression_type : unsigned int)

func extern make_atomic_type(type : int) : Type*
func extern make_pointer_type(type : Type*) : Type*


var extern stdout          : FILE*
var extern stderr          : FILE*
var extern token           : Token
var extern source_position : SourcePosition

concept AllocateOnAst<T>:
	func allocate() : T*

func allocate_zero<T>() : T*:
	var res <- cast<T* > allocate_ast(sizeof<T>)
	memset(res, 0, sizeof<T>)
	return res

instance AllocateOnAst BlockStatement:
	func allocate() : BlockStatement*:
		var res <- allocate_zero<$BlockStatement>()
		res.statement.type <- STATEMENT_BLOCK
		return res
	
instance AllocateOnAst IfStatement:
	func allocate() : IfStatement*:
		var res <- allocate_zero<$IfStatement>()
		res.statement.type <- STATEMENT_IF
		return res

instance AllocateOnAst ExpressionStatement:
	func allocate() : ExpressionStatement*:
		var res <- allocate_zero<$ExpressionStatement>()
		res.statement.type <- STATEMENT_EXPRESSION
		return res

instance AllocateOnAst GotoStatement:
	func allocate() : GotoStatement*:
		var res <- allocate_zero<$GotoStatement>()
		res.statement.type <- STATEMENT_GOTO
		return res

instance AllocateOnAst LabelStatement:
	func allocate() : LabelStatement*:
		var res <- allocate_zero<$LabelStatement>()
		res.statement.type <- STATEMENT_LABEL
		return res

instance AllocateOnAst Constant:
	func allocate() : Constant*:
		var res <- allocate_zero<$Constant>()
		res.declaration.type <- DECLARATION_CONSTANT
		return res

instance AllocateOnAst BinaryExpression:
	func allocate() : BinaryExpression*:
		var res <- allocate_zero<$BinaryExpression>()
		res.expression.type <- EXPR_BINARY
		return res

instance AllocateOnAst IntConst:
	func allocate() : IntConst*:
		var res <- allocate_zero<$IntConst>()
		res.expression.type <- EXPR_INT_CONST
		return res

func expect(token_type : int):
	if token.type /= token_type:
		parser_print_error_prefix()
		fputs("Parse error expected another token\n", stderr)
		abort()
	next_token()

func assert(expr : bool):
	if !expr:
		fputs("Assert failed\n", stderr)
		abort()

func block_append(block : BlockStatement*, append : Statement*):
	var statement <- block.statements

	if block.statements = null:
		block.statements <- append
		return

	:label
	if statement.next = null:
		statement.next <- append
		return

	statement <- statement.next
	goto label


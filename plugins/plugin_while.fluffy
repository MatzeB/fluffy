struct WhileStatement:
	statement    : Statement
	loop_control : Expression*
	loop_body    : Statement*
	loop_step    : Statement*

var token_while          : int
var token_continue       : int
var token_break          : int
var token_loop           : int
var token_step           : int
var while_statement_type : unsigned int
var current_loop         : WhileStatement*

instance AllocateOnAst WhileStatement:
	func allocate() : WhileStatement*:
		var res <- allocate_zero<$WhileStatement>()
		res.statement.type <- while_statement_type
		return res

func parse_while_statement() : Statement*:
	var statement                       <- allocate<$WhileStatement>()
	statement.statement.source_position <- source_position

	assert(token.type = token_while)
	next_token()

	statement.loop_control <- parse_expression()

	if token.type = token_step:
		next_token()
		var step_statement <- allocate<$ExpressionStatement>()
		step_statement.statement.source_position <- source_position
		step_statement.expression <- parse_expression()
		statement.loop_step <- cast<Statement*> step_statement

	expect(':')

	var last_current_loop <- current_loop
	current_loop <- statement

	statement.loop_body <- parse_statement()

	current_loop <- last_current_loop

	return cast<Statement*> statement

func parse_loop_statement() : Statement*:
	var statement                       <- allocate<$WhileStatement>()
	statement.statement.source_position <- source_position

	assert(token.type = token_loop)
	next_token()

	statement.loop_control <- null
	expect(':')

	statement.loop_body <- parse_statement()

	return cast<Statement*> statement

func parse_continue_statement() : Statement*:

	assert(token.type = token_continue)
	next_token()

	var statement                       <- allocate<$GotoStatement>()
	statement.statement.source_position <- source_position
	statement.symbol                    <- symbol_table_insert("__loop_next")

	return cast<Statement*> statement

func parse_break_statement() : Statement*:
	var statement                       <- allocate<$GotoStatement>()
	statement.statement.source_position <- source_position
	statement.symbol                    <- symbol_table_insert("__loop_end")
	
	assert(token.type = token_break)
	next_token()

	return cast<Statement*> statement

func lower_while_statement(statement : Statement*) : Statement*:
	var while_statement <- cast<WhileStatement*> statement
	var loop_body       <- while_statement.loop_body

	var label <- allocate<$LabelStatement>()
	label.declaration.declaration.symbol <- symbol_table_insert("__loop_begin")

	var body
	if while_statement.loop_control /= null:
		var if_statement            <- allocate<$IfStatement>()
		if_statement.statement.source_position \
			<- while_statement.statement.source_position
		if_statement.condition      <- while_statement.loop_control
		if_statement.true_statement <- loop_body
		body                        <- cast<Statement*> if_statement
	else:
		body <- loop_body 

	var loop_body_block  <- cast<BlockStatement*> loop_body

	var next_label <- allocate<$LabelStatement>()
	next_label.declaration.declaration.symbol \
		<- symbol_table_insert("__loop_next")
	block_append(loop_body_block, cast<Statement*> next_label)

	if while_statement.loop_step /= null:
		block_append(loop_body_block, while_statement.loop_step)

	var goto_statement   <- allocate<$GotoStatement>()
	goto_statement.statement.source_position \
		<- loop_body.source_position
	goto_statement.label <- & label.declaration
	block_append(loop_body_block, cast<Statement*> goto_statement)

	var endlabel <- allocate<$LabelStatement>()
	endlabel.declaration.declaration.symbol <- symbol_table_insert("__loop_end")

	var block <- allocate<$BlockStatement>()
	block_append(block, cast<Statement*> label)
	block_append(block, body)
	block_append(block, cast<Statement*> endlabel)
	context_append(&block.context, &label.declaration.declaration)
	context_append(&block.context, &endlabel.declaration.declaration)
	context_append(&block.context, &next_label.declaration.declaration)

	return cast<Statement*> block

export init_plugin
func init_plugin():
	//stderr <- _stderrp

	token_while          <- register_new_token("while")
	token_continue       <- register_new_token("continue")
	token_break          <- register_new_token("break")
	token_loop           <- register_new_token("loop")
	token_step           <- register_new_token("step")
	while_statement_type <- register_statement()
	register_statement_parser(parse_while_statement, token_while)
	register_statement_parser(parse_loop_statement, token_loop)
	register_statement_parser(parse_continue_statement, token_continue)
	register_statement_parser(parse_break_statement, token_break)
	register_statement_lowerer(lower_while_statement, while_statement_type)

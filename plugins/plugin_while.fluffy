struct WhileStatement:
	statement    : Statement
	loop_control : Expression*
	loop_body    : Statement*

var token_while          : int
var while_statement_type : unsigned int

instance AllocateOnAst WhileStatement:
	func allocate() : WhileStatement*:
		var res <- allocate_zero<$WhileStatement>()
		res.statement.type <- while_statement_type
		return res

func parse_while_statement() : Statement*:
	var statement <- allocate<$WhileStatement>()

	//assert(token.type = token_while)
	next_token()

	statement.loop_control <- parse_expression()
	expect(':')

	statement.loop_body <- parse_statement()

	return cast<Statement* > statement

func lower_while_statement(statement : Statement*) : Statement*:
	var while_statement <- cast<WhileStatement* > statement
	var loop_body       <- while_statement.loop_body

	/* lower&check semantics of inner expressions and statements */
	loop_body <- check_statement(loop_body)
	while_statement.loop_control \
		<- check_expression(while_statement.loop_control)

	var label             <- allocate<$LabelStatement>()

	var if_statement            <- allocate<$IfStatement>()
	if_statement.condition      <- while_statement.loop_control
	if_statement.true_statement <- loop_body

	var loop_body_block        <- cast<BlockStatement* > loop_body

	var goto_statement   <- allocate<$GotoStatement>()
	goto_statement.label <- label.declaration
	block_append(loop_body_block, cast<Statement* > goto_statement)

	var block                 <- allocate<$BlockStatement>()
	block.statements          <- cast<Statement* > label
	label.statement.next      <- cast<Statement* > if_statement

	return cast<Statement* > block

export init_plugin
func init_plugin():
	token_while          <- register_new_token("while")
	while_statement_type <- register_statement()
	register_statement_parser(parse_while_statement, token_while)
	register_statement_lowerer(lower_while_statement, while_statement_type)
